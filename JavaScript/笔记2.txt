☞ 字符串中转义字符（了解）

    \

    \r\n :  在字符串中实现回车换行的效果

    总结：
         1. 如果在字符串中使用了相同的引号，需要设置转义字符。

         2.  在字符串中实现回车换行的效果，需要设置转义字符 \n\r


☞ 数字类型中的取值范围（了解）：

     //获取数字类型中的最大值
     alert(Number.MAX_VALUE);

     alert(Number.MIN_VALUE);


☞ 在程序中如何判断一个值是不是数字？

    ✔ 不能通过数据类型的方式去判断一个值是不是数字。

    ✔ isNaN(变量) 就是用来判断一个值是不是数字的。

        总结：
              1. 如果isNaN() 得到的结果是 true ----》不是数字

              2. 如果isNaN() 得到的结果是 false ---> 是数字

              3. 如果是非数字类型进行数学运算，得到的结果是 NaN


☞ 数据类型转换（补充）：

     1. 强制类型转换（显示类型转换）： Number()  parseInt()   String()...

     2. 隐式类型转换： 在程序计算过程中发生的数据类型转换

☞ 算数运算符：
      
       + 

       -

       * 

       /

       %  : 取余（获取余数）。模运算

       () :  优先级，如果程序计算过程中遇到()，先计算()中的值。

              注意：
                   在小括号外不能套其他括号

       总结：
           1. 如果变量中的值是数字，那么在进行数学运算过程后，得到的结果一定是数字。

           2. 如果是字符串相加，那么得到的结果是字符串（加号起到是练的作用）

           3. 如果是数字格式的字符串相减，那么得到结果也是数字【发生了隐式类型转换】

           4. 如果除数是数字0,那么得到结果是 Infinity 【无穷大】。对应的数据类型也是number类型

           5.  如果是数字格式的字符串相除，那么得到结果也是数字【发生了隐式类型转换】


☞ 赋值运算符

    1. = : 赋值运算符，作用是将右侧的结果赋值给左侧的变量

    2.   a += b;   a -= b     a *= b    a /= b

         a += b   ----->  a =  a + b;

☞ 一元运算符:

        ++

            1. ++a

            2. a++


        --

            1. --a

            2. a--


        总结：
             1.  如果对一个变量进行  a++ 或者 ++a 操作，最后的结果都是在变量原来值的基础加1

             2.  a ++  和  ++a 的区别：

                  
                  ✔ 如果将 a++ 和 ++a 赋值给一个新的变量，那么这个变量的值是有区别的。


                  ✔ 如果将 a++ 赋值给 变量 b ,那么变量b的取值等于a加1之前的值【先赋值后计算】

                  ✔ 如果将 ++a 赋值给 变量b ，那么变量b的取值等于a加1之后的值【先计算后赋值】

                  ✔ a 的值永远都要加1
              


☞ 比较运算符:
     
     >  : 大于

     <  : 小于

     >= : 大于 或 等于    

     <= : 小于 或 等于

     == : 等于【判断值是否相等，不考虑数据类型】

     ===: 全等于【同时要判断值和数据类型】


      != ：不等于 【只考虑值是否不相等，不考虑数据类型】

      !== : 完全不等于 【同时要考虑值和数据类型】

     总结：
         1. 通过比较运算符后，得到结果是布尔类型的结果.


☞ 逻辑运算符

     且（与）  && ： 并且【条件必须都满足】

     或        ||： 或者【条件只要有一个满足就可以了】

     非         !： 获取反面

     总结：

         1. 当在程序中需要同时设置多个条件的时候，此时需要使用逻辑运算符连接

         2. 通过逻辑运算符最后的的结果一般情况下都布尔类型的结果


         3. 且运算：

              true  && false   ====》 false

              false &&  false  ====》 false

              true && true  ====》true


          4. 或运算：

               true || false  ===> true

               true || true  ===> true

               false  || false  ===> false


          5. 非运算：   

               !true   ===》 false
               !false   ===> true



☞ 条件判断： 根据条件的不同，实现不同的效果

      作用： 能够写出基本的带有逻辑性的功能代码

      语法：

         if( 条件表达式 ) {

             逻辑代码

         }else {

             逻辑代码
         }


       细节：

          条件表达式： 最后能得出一个布尔类型结果的式子

          逻辑代码： 用来实现需求的具体代码



       执行过程（重要）：
           1. 先执行条件表达式

           2. 判断条件表达式的结果是true 还是 false

           3. 如果是true , 那么程序只执行 if 中的逻辑代码，后面的代码不再执行

           4. 如果是false, 那么程序只执行 else 中的逻辑代码，if中的代码不执行。
         
☞ 三元表达式(三元运算符)

      语法：

         条件表达式 ?  逻辑代码1  : 逻辑代码2;

      
      执行过程（重要）：

          1. 先执行条件表达式

          2. 判断当前结果是true？ 如果是true，那么执行 逻辑代码1，后面的代码不再执行

          3. 如果条件表达式的结果是false, 那么执行 逻辑代码2，逻辑代码1不执行。


      注意：
         三元表达式就是条件表达式的简写形式。



☞ 多条件语法结构:

     if(条件表达式) {

     }else if(条件表达式) {

     }else if (条件表达式) {

     }else {

     }


     执行过程（重要）：
          1.  先执行第一个条件表达式

          2. 判断第一个条件表达式结果是否为true

          3. 如果是true，那么程序只执行第一个逻辑代码，后面的代码不再执行

          4. 如果是false,那么继续判断下面的条件表达式。如果是true,就执行对应的代码，后面的代码不再执行

          5. 如果以上条件都不满足，才会执行else中的代码。


     


      





