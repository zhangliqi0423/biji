☞ switch语句（语法结构）：

    语法：

    switch( 变量 ) {

             case  值1:
                
                逻辑代码;
             break;

             case 值2:
                逻辑代码;
             break;

             default:
                逻辑代码；
             break;
        }


        使用场景： 如果程序中变量的值是一些固定的值，那么可以考虑使用switch实现。

    注意事项：
         1. switch 后面的变量数据类型 要和 case 后面值的数据类型保持一致。

         2. switch 中 break不能省略

☞ 循环语句：

     循环： 反复的做某件事情。

     1. while循环

         语法： 

             ✔ 先要初始化变量

             ✔ 
              while ( 条件表达式 ) {
                 逻辑代码（循环体代码）
              }

          执行过程：

               1. 先执行变量初始化

               2. 将该变量的值，带入到 条件表达式，判断是否成立

               3. 如果条件成立（true）, 那么程序就会立即进入到循环体代码中

               4. 如果条件不成立（false），那么程序就会立即结束。

               5. 条件成立就执行，不成立就不执行。

             

    
     2. do..while 循环
         
         语法：

             ✔ 变量初始化

             ✔ 
             do {
               
                循环体代码

             }while(条件表达式)


         执行过程：

             1. 先执行变量初始化

             2. 执行循环体中的代码

             3. 判断条件是否成立,如果成立，继续执行循环体中的代码

             4. 如果条件不成立，循环立即结束。

      
         do while循环与 while循环的区别：

             ✔  do  while循环要比 while 多执行一次。[在条件不满足的情况下]

     
     3. for循环（重点）：

          语法：

             for(变量初始化;  条件表达式;  变量自增（变量自减）) {
                  
                  循环体代码;
             }

          执行过程：
              
              1. 变量初始化

              2. 将变量中的值带入到条件表达式中，然后判断表达式是否成立（满足）

              3. 如果表达式满足（true）, 那么程序立即执行循环体中的代码

              4. 进行变量的自增或自减，然后将该变量的值带入到条件表达式中，判断条件是否成立

              5. 如果成立，继续执行循环体中的代码，如果不成立循环立即结束
              



☞ 断点调试（技能）： 

      作用：
          1. 可以通过断点调试的方式了解程序每一步执行的过程。

          2. 梳理程序中的错误（逻辑性上的错误）


      步骤：

         1.  先运行程序

         2.  打开浏览器中的控制台程序（F12）

         3.  选中sources选项

         4. 点击对应的HTML页面

         5. 在对应的js代码位置处设置断点

         6. 重新执行程序（刷新页面）

         7. 点击下一步按钮（F10）


        重点关注两个地方：
             1. 变量中值的变化
             2. 条件表达式的结果


☞关键字：

    1. continue:

         在循环语句中，如果程序遇到continue，那么后面的代码不再执行，整个循环还会继续执行。

    2. break:

         在循环语句中，如果程序遇到break关键字的时候，后面的代码不再执行，整个循环立即结束。

      






